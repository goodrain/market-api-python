# coding: utf-8

"""
    rainbond cloud app market OpenAPI.

    the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: 576501057@qq.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from market_client.models.order_app import OrderApp  # noqa: F401,E501
from market_client.models.order_buyer import OrderBuyer  # noqa: F401,E501
from market_client.models.order_state import OrderState  # noqa: F401,E501
from market_client.models.order_svc_provider import OrderSvcProvider  # noqa: F401,E501
from market_client.models.order_type import OrderType  # noqa: F401,E501


class Order(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app': 'OrderApp',
        'buyer': 'OrderBuyer',
        'cancel_time': 'datetime',
        'create_time': 'datetime',
        'delivery_mode': 'str',
        'delivery_time': 'datetime',
        'eid': 'str',
        'expire_date': 'datetime',
        'final_fee': 'float',
        'finish_time': 'datetime',
        'id': 'str',
        'pay_time': 'datetime',
        'pid': 'str',
        'ptype': 'str',
        'state': 'OrderState',
        'svc_provider': 'OrderSvcProvider',
        'type': 'OrderType'
    }

    attribute_map = {
        'app': 'app',
        'buyer': 'buyer',
        'cancel_time': 'cancel_time',
        'create_time': 'create_time',
        'delivery_mode': 'delivery_mode',
        'delivery_time': 'delivery_time',
        'eid': 'eid',
        'expire_date': 'expire_date',
        'final_fee': 'final_fee',
        'finish_time': 'finish_time',
        'id': 'id',
        'pay_time': 'pay_time',
        'pid': 'pid',
        'ptype': 'ptype',
        'state': 'state',
        'svc_provider': 'svc_provider',
        'type': 'type'
    }

    def __init__(self, app=None, buyer=None, cancel_time=None, create_time=None, delivery_mode=None, delivery_time=None, eid=None, expire_date=None, final_fee=None, finish_time=None, id=None, pay_time=None, pid=None, ptype=None, state=None, svc_provider=None, type=None):  # noqa: E501
        """Order - a model defined in Swagger"""  # noqa: E501

        self._app = None
        self._buyer = None
        self._cancel_time = None
        self._create_time = None
        self._delivery_mode = None
        self._delivery_time = None
        self._eid = None
        self._expire_date = None
        self._final_fee = None
        self._finish_time = None
        self._id = None
        self._pay_time = None
        self._pid = None
        self._ptype = None
        self._state = None
        self._svc_provider = None
        self._type = None
        self.discriminator = None

        if app is not None:
            self.app = app
        if buyer is not None:
            self.buyer = buyer
        if cancel_time is not None:
            self.cancel_time = cancel_time
        if create_time is not None:
            self.create_time = create_time
        if delivery_mode is not None:
            self.delivery_mode = delivery_mode
        if delivery_time is not None:
            self.delivery_time = delivery_time
        if eid is not None:
            self.eid = eid
        if expire_date is not None:
            self.expire_date = expire_date
        if final_fee is not None:
            self.final_fee = final_fee
        if finish_time is not None:
            self.finish_time = finish_time
        if id is not None:
            self.id = id
        if pay_time is not None:
            self.pay_time = pay_time
        if pid is not None:
            self.pid = pid
        if ptype is not None:
            self.ptype = ptype
        if state is not None:
            self.state = state
        if svc_provider is not None:
            self.svc_provider = svc_provider
        if type is not None:
            self.type = type

    @property
    def app(self):
        """Gets the app of this Order.  # noqa: E501


        :return: The app of this Order.  # noqa: E501
        :rtype: OrderApp
        """
        return self._app

    @app.setter
    def app(self, app):
        """Sets the app of this Order.


        :param app: The app of this Order.  # noqa: E501
        :type: OrderApp
        """

        self._app = app

    @property
    def buyer(self):
        """Gets the buyer of this Order.  # noqa: E501


        :return: The buyer of this Order.  # noqa: E501
        :rtype: OrderBuyer
        """
        return self._buyer

    @buyer.setter
    def buyer(self, buyer):
        """Sets the buyer of this Order.


        :param buyer: The buyer of this Order.  # noqa: E501
        :type: OrderBuyer
        """

        self._buyer = buyer

    @property
    def cancel_time(self):
        """Gets the cancel_time of this Order.  # noqa: E501


        :return: The cancel_time of this Order.  # noqa: E501
        :rtype: datetime
        """
        return self._cancel_time

    @cancel_time.setter
    def cancel_time(self, cancel_time):
        """Sets the cancel_time of this Order.


        :param cancel_time: The cancel_time of this Order.  # noqa: E501
        :type: datetime
        """

        self._cancel_time = cancel_time

    @property
    def create_time(self):
        """Gets the create_time of this Order.  # noqa: E501


        :return: The create_time of this Order.  # noqa: E501
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Order.


        :param create_time: The create_time of this Order.  # noqa: E501
        :type: datetime
        """

        self._create_time = create_time

    @property
    def delivery_mode(self):
        """Gets the delivery_mode of this Order.  # noqa: E501


        :return: The delivery_mode of this Order.  # noqa: E501
        :rtype: str
        """
        return self._delivery_mode

    @delivery_mode.setter
    def delivery_mode(self, delivery_mode):
        """Sets the delivery_mode of this Order.


        :param delivery_mode: The delivery_mode of this Order.  # noqa: E501
        :type: str
        """

        self._delivery_mode = delivery_mode

    @property
    def delivery_time(self):
        """Gets the delivery_time of this Order.  # noqa: E501


        :return: The delivery_time of this Order.  # noqa: E501
        :rtype: datetime
        """
        return self._delivery_time

    @delivery_time.setter
    def delivery_time(self, delivery_time):
        """Sets the delivery_time of this Order.


        :param delivery_time: The delivery_time of this Order.  # noqa: E501
        :type: datetime
        """

        self._delivery_time = delivery_time

    @property
    def eid(self):
        """Gets the eid of this Order.  # noqa: E501


        :return: The eid of this Order.  # noqa: E501
        :rtype: str
        """
        return self._eid

    @eid.setter
    def eid(self, eid):
        """Sets the eid of this Order.


        :param eid: The eid of this Order.  # noqa: E501
        :type: str
        """

        self._eid = eid

    @property
    def expire_date(self):
        """Gets the expire_date of this Order.  # noqa: E501


        :return: The expire_date of this Order.  # noqa: E501
        :rtype: datetime
        """
        return self._expire_date

    @expire_date.setter
    def expire_date(self, expire_date):
        """Sets the expire_date of this Order.


        :param expire_date: The expire_date of this Order.  # noqa: E501
        :type: datetime
        """

        self._expire_date = expire_date

    @property
    def final_fee(self):
        """Gets the final_fee of this Order.  # noqa: E501


        :return: The final_fee of this Order.  # noqa: E501
        :rtype: float
        """
        return self._final_fee

    @final_fee.setter
    def final_fee(self, final_fee):
        """Sets the final_fee of this Order.


        :param final_fee: The final_fee of this Order.  # noqa: E501
        :type: float
        """

        self._final_fee = final_fee

    @property
    def finish_time(self):
        """Gets the finish_time of this Order.  # noqa: E501


        :return: The finish_time of this Order.  # noqa: E501
        :rtype: datetime
        """
        return self._finish_time

    @finish_time.setter
    def finish_time(self, finish_time):
        """Sets the finish_time of this Order.


        :param finish_time: The finish_time of this Order.  # noqa: E501
        :type: datetime
        """

        self._finish_time = finish_time

    @property
    def id(self):
        """Gets the id of this Order.  # noqa: E501


        :return: The id of this Order.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Order.


        :param id: The id of this Order.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def pay_time(self):
        """Gets the pay_time of this Order.  # noqa: E501


        :return: The pay_time of this Order.  # noqa: E501
        :rtype: datetime
        """
        return self._pay_time

    @pay_time.setter
    def pay_time(self, pay_time):
        """Sets the pay_time of this Order.


        :param pay_time: The pay_time of this Order.  # noqa: E501
        :type: datetime
        """

        self._pay_time = pay_time

    @property
    def pid(self):
        """Gets the pid of this Order.  # noqa: E501


        :return: The pid of this Order.  # noqa: E501
        :rtype: str
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this Order.


        :param pid: The pid of this Order.  # noqa: E501
        :type: str
        """

        self._pid = pid

    @property
    def ptype(self):
        """Gets the ptype of this Order.  # noqa: E501


        :return: The ptype of this Order.  # noqa: E501
        :rtype: str
        """
        return self._ptype

    @ptype.setter
    def ptype(self, ptype):
        """Sets the ptype of this Order.


        :param ptype: The ptype of this Order.  # noqa: E501
        :type: str
        """

        self._ptype = ptype

    @property
    def state(self):
        """Gets the state of this Order.  # noqa: E501


        :return: The state of this Order.  # noqa: E501
        :rtype: OrderState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Order.


        :param state: The state of this Order.  # noqa: E501
        :type: OrderState
        """

        self._state = state

    @property
    def svc_provider(self):
        """Gets the svc_provider of this Order.  # noqa: E501


        :return: The svc_provider of this Order.  # noqa: E501
        :rtype: OrderSvcProvider
        """
        return self._svc_provider

    @svc_provider.setter
    def svc_provider(self, svc_provider):
        """Sets the svc_provider of this Order.


        :param svc_provider: The svc_provider of this Order.  # noqa: E501
        :type: OrderSvcProvider
        """

        self._svc_provider = svc_provider

    @property
    def type(self):
        """Gets the type of this Order.  # noqa: E501


        :return: The type of this Order.  # noqa: E501
        :rtype: OrderType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Order.


        :param type: The type of this Order.  # noqa: E501
        :type: OrderType
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Order, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Order):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
