# coding: utf-8

"""
    rainbond cloud app market OpenAPI.

    the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: 576501057@qq.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OrderBuyer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'eid': 'str',
        'ent_name': 'str',
        'user_id': 'str',
        'username': 'str'
    }

    attribute_map = {
        'eid': 'eid',
        'ent_name': 'ent_name',
        'user_id': 'user_id',
        'username': 'username'
    }

    def __init__(self, eid=None, ent_name=None, user_id=None, username=None):  # noqa: E501
        """OrderBuyer - a model defined in Swagger"""  # noqa: E501

        self._eid = None
        self._ent_name = None
        self._user_id = None
        self._username = None
        self.discriminator = None

        if eid is not None:
            self.eid = eid
        if ent_name is not None:
            self.ent_name = ent_name
        if user_id is not None:
            self.user_id = user_id
        if username is not None:
            self.username = username

    @property
    def eid(self):
        """Gets the eid of this OrderBuyer.  # noqa: E501


        :return: The eid of this OrderBuyer.  # noqa: E501
        :rtype: str
        """
        return self._eid

    @eid.setter
    def eid(self, eid):
        """Sets the eid of this OrderBuyer.


        :param eid: The eid of this OrderBuyer.  # noqa: E501
        :type: str
        """

        self._eid = eid

    @property
    def ent_name(self):
        """Gets the ent_name of this OrderBuyer.  # noqa: E501


        :return: The ent_name of this OrderBuyer.  # noqa: E501
        :rtype: str
        """
        return self._ent_name

    @ent_name.setter
    def ent_name(self, ent_name):
        """Sets the ent_name of this OrderBuyer.


        :param ent_name: The ent_name of this OrderBuyer.  # noqa: E501
        :type: str
        """

        self._ent_name = ent_name

    @property
    def user_id(self):
        """Gets the user_id of this OrderBuyer.  # noqa: E501


        :return: The user_id of this OrderBuyer.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this OrderBuyer.


        :param user_id: The user_id of this OrderBuyer.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def username(self):
        """Gets the username of this OrderBuyer.  # noqa: E501


        :return: The username of this OrderBuyer.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this OrderBuyer.


        :param username: The username of this OrderBuyer.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderBuyer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderBuyer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
