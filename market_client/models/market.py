# coding: utf-8

"""
    rainbond cloud app market OpenAPI.

    the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: 576501057@qq.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from market_client.models.enterprise import Enterprise  # noqa: F401,E501


class Market(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'base': 'str',
        'create_time': 'datetime',
        'eid': 'str',
        'enterprise': 'Enterprise',
        'market_id': 'str',
        'name': 'str',
        'price': 'float',
        'provider_saas': 'bool',
        'staff_name': 'str',
        'staff_qq': 'str',
        'status': 'int'
    }

    attribute_map = {
        'base': 'base',
        'create_time': 'create_time',
        'eid': 'eid',
        'enterprise': 'enterprise',
        'market_id': 'market_id',
        'name': 'name',
        'price': 'price',
        'provider_saas': 'provider_saas',
        'staff_name': 'staff_name',
        'staff_qq': 'staff_qq',
        'status': 'status'
    }

    def __init__(self, base=None, create_time=None, eid=None, enterprise=None, market_id=None, name=None, price=None, provider_saas=None, staff_name=None, staff_qq=None, status=None):  # noqa: E501
        """Market - a model defined in Swagger"""  # noqa: E501

        self._base = None
        self._create_time = None
        self._eid = None
        self._enterprise = None
        self._market_id = None
        self._name = None
        self._price = None
        self._provider_saas = None
        self._staff_name = None
        self._staff_qq = None
        self._status = None
        self.discriminator = None

        if base is not None:
            self.base = base
        if create_time is not None:
            self.create_time = create_time
        if eid is not None:
            self.eid = eid
        if enterprise is not None:
            self.enterprise = enterprise
        if market_id is not None:
            self.market_id = market_id
        if name is not None:
            self.name = name
        if price is not None:
            self.price = price
        if provider_saas is not None:
            self.provider_saas = provider_saas
        if staff_name is not None:
            self.staff_name = staff_name
        if staff_qq is not None:
            self.staff_qq = staff_qq
        if status is not None:
            self.status = status

    @property
    def base(self):
        """Gets the base of this Market.  # noqa: E501


        :return: The base of this Market.  # noqa: E501
        :rtype: str
        """
        return self._base

    @base.setter
    def base(self, base):
        """Sets the base of this Market.


        :param base: The base of this Market.  # noqa: E501
        :type: str
        """

        self._base = base

    @property
    def create_time(self):
        """Gets the create_time of this Market.  # noqa: E501


        :return: The create_time of this Market.  # noqa: E501
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Market.


        :param create_time: The create_time of this Market.  # noqa: E501
        :type: datetime
        """

        self._create_time = create_time

    @property
    def eid(self):
        """Gets the eid of this Market.  # noqa: E501


        :return: The eid of this Market.  # noqa: E501
        :rtype: str
        """
        return self._eid

    @eid.setter
    def eid(self, eid):
        """Sets the eid of this Market.


        :param eid: The eid of this Market.  # noqa: E501
        :type: str
        """

        self._eid = eid

    @property
    def enterprise(self):
        """Gets the enterprise of this Market.  # noqa: E501


        :return: The enterprise of this Market.  # noqa: E501
        :rtype: Enterprise
        """
        return self._enterprise

    @enterprise.setter
    def enterprise(self, enterprise):
        """Sets the enterprise of this Market.


        :param enterprise: The enterprise of this Market.  # noqa: E501
        :type: Enterprise
        """

        self._enterprise = enterprise

    @property
    def market_id(self):
        """Gets the market_id of this Market.  # noqa: E501


        :return: The market_id of this Market.  # noqa: E501
        :rtype: str
        """
        return self._market_id

    @market_id.setter
    def market_id(self, market_id):
        """Sets the market_id of this Market.


        :param market_id: The market_id of this Market.  # noqa: E501
        :type: str
        """

        self._market_id = market_id

    @property
    def name(self):
        """Gets the name of this Market.  # noqa: E501


        :return: The name of this Market.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Market.


        :param name: The name of this Market.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def price(self):
        """Gets the price of this Market.  # noqa: E501


        :return: The price of this Market.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Market.


        :param price: The price of this Market.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def provider_saas(self):
        """Gets the provider_saas of this Market.  # noqa: E501


        :return: The provider_saas of this Market.  # noqa: E501
        :rtype: bool
        """
        return self._provider_saas

    @provider_saas.setter
    def provider_saas(self, provider_saas):
        """Sets the provider_saas of this Market.


        :param provider_saas: The provider_saas of this Market.  # noqa: E501
        :type: bool
        """

        self._provider_saas = provider_saas

    @property
    def staff_name(self):
        """Gets the staff_name of this Market.  # noqa: E501


        :return: The staff_name of this Market.  # noqa: E501
        :rtype: str
        """
        return self._staff_name

    @staff_name.setter
    def staff_name(self, staff_name):
        """Sets the staff_name of this Market.


        :param staff_name: The staff_name of this Market.  # noqa: E501
        :type: str
        """

        self._staff_name = staff_name

    @property
    def staff_qq(self):
        """Gets the staff_qq of this Market.  # noqa: E501


        :return: The staff_qq of this Market.  # noqa: E501
        :rtype: str
        """
        return self._staff_qq

    @staff_qq.setter
    def staff_qq(self, staff_qq):
        """Sets the staff_qq of this Market.


        :param staff_qq: The staff_qq of this Market.  # noqa: E501
        :type: str
        """

        self._staff_qq = staff_qq

    @property
    def status(self):
        """Gets the status of this Market.  # noqa: E501


        :return: The status of this Market.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Market.


        :param status: The status of this Market.  # noqa: E501
        :type: int
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Market, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Market):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
