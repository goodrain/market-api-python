# coding: utf-8

"""
    rainbond cloud app market OpenAPI.

    the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: 576501057@qq.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PostAPPTemplete(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_id': 'str',
        'app_name': 'str',
        'describe': 'str',
        'details': 'str',
        'dev_status': 'str',
        'group_template': 'str',
        'group_version': 'str',
        'group_version_alias': 'str',
        'logo': 'str',
        'publish_team': 'str',
        'publish_user': 'str',
        'rainbond_version': 'str',
        'scope': 'str',
        'template_version': 'str',
        'tenant_id': 'str'
    }

    attribute_map = {
        'app_id': 'app_id',
        'app_name': 'app_name',
        'describe': 'describe',
        'details': 'details',
        'dev_status': 'dev_status',
        'group_template': 'group_template',
        'group_version': 'group_version',
        'group_version_alias': 'group_version_alias',
        'logo': 'logo',
        'publish_team': 'publish_team',
        'publish_user': 'publish_user',
        'rainbond_version': 'rainbond_version',
        'scope': 'scope',
        'template_version': 'template_version',
        'tenant_id': 'tenant_id'
    }

    def __init__(self, app_id=None, app_name=None, describe=None, details=None, dev_status=None, group_template=None, group_version=None, group_version_alias=None, logo=None, publish_team=None, publish_user=None, rainbond_version=None, scope=None, template_version=None, tenant_id=None):  # noqa: E501
        """PostAPPTemplete - a model defined in Swagger"""  # noqa: E501

        self._app_id = None
        self._app_name = None
        self._describe = None
        self._details = None
        self._dev_status = None
        self._group_template = None
        self._group_version = None
        self._group_version_alias = None
        self._logo = None
        self._publish_team = None
        self._publish_user = None
        self._rainbond_version = None
        self._scope = None
        self._template_version = None
        self._tenant_id = None
        self.discriminator = None

        if app_id is not None:
            self.app_id = app_id
        if app_name is not None:
            self.app_name = app_name
        if describe is not None:
            self.describe = describe
        if details is not None:
            self.details = details
        if dev_status is not None:
            self.dev_status = dev_status
        if group_template is not None:
            self.group_template = group_template
        if group_version is not None:
            self.group_version = group_version
        if group_version_alias is not None:
            self.group_version_alias = group_version_alias
        if logo is not None:
            self.logo = logo
        if publish_team is not None:
            self.publish_team = publish_team
        if publish_user is not None:
            self.publish_user = publish_user
        if rainbond_version is not None:
            self.rainbond_version = rainbond_version
        if scope is not None:
            self.scope = scope
        if template_version is not None:
            self.template_version = template_version
        if tenant_id is not None:
            self.tenant_id = tenant_id

    @property
    def app_id(self):
        """Gets the app_id of this PostAPPTemplete.  # noqa: E501


        :return: The app_id of this PostAPPTemplete.  # noqa: E501
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this PostAPPTemplete.


        :param app_id: The app_id of this PostAPPTemplete.  # noqa: E501
        :type: str
        """

        self._app_id = app_id

    @property
    def app_name(self):
        """Gets the app_name of this PostAPPTemplete.  # noqa: E501


        :return: The app_name of this PostAPPTemplete.  # noqa: E501
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this PostAPPTemplete.


        :param app_name: The app_name of this PostAPPTemplete.  # noqa: E501
        :type: str
        """

        self._app_name = app_name

    @property
    def describe(self):
        """Gets the describe of this PostAPPTemplete.  # noqa: E501


        :return: The describe of this PostAPPTemplete.  # noqa: E501
        :rtype: str
        """
        return self._describe

    @describe.setter
    def describe(self, describe):
        """Sets the describe of this PostAPPTemplete.


        :param describe: The describe of this PostAPPTemplete.  # noqa: E501
        :type: str
        """

        self._describe = describe

    @property
    def details(self):
        """Gets the details of this PostAPPTemplete.  # noqa: E501


        :return: The details of this PostAPPTemplete.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this PostAPPTemplete.


        :param details: The details of this PostAPPTemplete.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def dev_status(self):
        """Gets the dev_status of this PostAPPTemplete.  # noqa: E501


        :return: The dev_status of this PostAPPTemplete.  # noqa: E501
        :rtype: str
        """
        return self._dev_status

    @dev_status.setter
    def dev_status(self, dev_status):
        """Sets the dev_status of this PostAPPTemplete.


        :param dev_status: The dev_status of this PostAPPTemplete.  # noqa: E501
        :type: str
        """

        self._dev_status = dev_status

    @property
    def group_template(self):
        """Gets the group_template of this PostAPPTemplete.  # noqa: E501


        :return: The group_template of this PostAPPTemplete.  # noqa: E501
        :rtype: str
        """
        return self._group_template

    @group_template.setter
    def group_template(self, group_template):
        """Sets the group_template of this PostAPPTemplete.


        :param group_template: The group_template of this PostAPPTemplete.  # noqa: E501
        :type: str
        """

        self._group_template = group_template

    @property
    def group_version(self):
        """Gets the group_version of this PostAPPTemplete.  # noqa: E501


        :return: The group_version of this PostAPPTemplete.  # noqa: E501
        :rtype: str
        """
        return self._group_version

    @group_version.setter
    def group_version(self, group_version):
        """Sets the group_version of this PostAPPTemplete.


        :param group_version: The group_version of this PostAPPTemplete.  # noqa: E501
        :type: str
        """

        self._group_version = group_version

    @property
    def group_version_alias(self):
        """Gets the group_version_alias of this PostAPPTemplete.  # noqa: E501


        :return: The group_version_alias of this PostAPPTemplete.  # noqa: E501
        :rtype: str
        """
        return self._group_version_alias

    @group_version_alias.setter
    def group_version_alias(self, group_version_alias):
        """Sets the group_version_alias of this PostAPPTemplete.


        :param group_version_alias: The group_version_alias of this PostAPPTemplete.  # noqa: E501
        :type: str
        """

        self._group_version_alias = group_version_alias

    @property
    def logo(self):
        """Gets the logo of this PostAPPTemplete.  # noqa: E501


        :return: The logo of this PostAPPTemplete.  # noqa: E501
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this PostAPPTemplete.


        :param logo: The logo of this PostAPPTemplete.  # noqa: E501
        :type: str
        """

        self._logo = logo

    @property
    def publish_team(self):
        """Gets the publish_team of this PostAPPTemplete.  # noqa: E501


        :return: The publish_team of this PostAPPTemplete.  # noqa: E501
        :rtype: str
        """
        return self._publish_team

    @publish_team.setter
    def publish_team(self, publish_team):
        """Sets the publish_team of this PostAPPTemplete.


        :param publish_team: The publish_team of this PostAPPTemplete.  # noqa: E501
        :type: str
        """

        self._publish_team = publish_team

    @property
    def publish_user(self):
        """Gets the publish_user of this PostAPPTemplete.  # noqa: E501


        :return: The publish_user of this PostAPPTemplete.  # noqa: E501
        :rtype: str
        """
        return self._publish_user

    @publish_user.setter
    def publish_user(self, publish_user):
        """Sets the publish_user of this PostAPPTemplete.


        :param publish_user: The publish_user of this PostAPPTemplete.  # noqa: E501
        :type: str
        """

        self._publish_user = publish_user

    @property
    def rainbond_version(self):
        """Gets the rainbond_version of this PostAPPTemplete.  # noqa: E501


        :return: The rainbond_version of this PostAPPTemplete.  # noqa: E501
        :rtype: str
        """
        return self._rainbond_version

    @rainbond_version.setter
    def rainbond_version(self, rainbond_version):
        """Sets the rainbond_version of this PostAPPTemplete.


        :param rainbond_version: The rainbond_version of this PostAPPTemplete.  # noqa: E501
        :type: str
        """

        self._rainbond_version = rainbond_version

    @property
    def scope(self):
        """Gets the scope of this PostAPPTemplete.  # noqa: E501


        :return: The scope of this PostAPPTemplete.  # noqa: E501
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this PostAPPTemplete.


        :param scope: The scope of this PostAPPTemplete.  # noqa: E501
        :type: str
        """

        self._scope = scope

    @property
    def template_version(self):
        """Gets the template_version of this PostAPPTemplete.  # noqa: E501


        :return: The template_version of this PostAPPTemplete.  # noqa: E501
        :rtype: str
        """
        return self._template_version

    @template_version.setter
    def template_version(self, template_version):
        """Sets the template_version of this PostAPPTemplete.


        :param template_version: The template_version of this PostAPPTemplete.  # noqa: E501
        :type: str
        """

        self._template_version = template_version

    @property
    def tenant_id(self):
        """Gets the tenant_id of this PostAPPTemplete.  # noqa: E501


        :return: The tenant_id of this PostAPPTemplete.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this PostAPPTemplete.


        :param tenant_id: The tenant_id of this PostAPPTemplete.  # noqa: E501
        :type: str
        """

        self._tenant_id = tenant_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostAPPTemplete, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostAPPTemplete):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
